@model MaleyApp.ViewModels.ProductIndexViewModel
@using PagedList.Mvc
@{
    ViewBag.Title = "Products";
}

<h2>@ViewBag.Title</h2>
<p>
    <!--
    La indicación de cuántos productos se encontraron se muestra usando el código:-->
    @(String.IsNullOrWhiteSpace(Model.Search) ? "Showing all" : "You search for " +
                         Model.Search + " found") @Model.Products.TotalItemCount products
                    </p>

                    <p>
                        @Html.ActionLink("Create New", "Create")
                        @using (Html.BeginRouteForm("ProductsIndex", FormMethod.Get))
                        {
                            <label>Filtrar por categorìa:</label>
                            @Html.DropDownListFor(vm => vm.Category, Model.CatFilterItems, "All");

                            <label>Clasificar por:</label>
                            @Html.DropDownListFor(vm => vm.SortBy, new SelectList(Model.Sorts, "Value", "Key"),
                                            "Default")

                            <input type="submit" value="Filter" />

                            <input type="hidden" name="Search" id="Search" value="@Model.Search" />
                        }
                    </p>
                    <table class="table">
                        <tr>
                            <th></th>
                            <th>
                                @Html.DisplayNameFor(model => model.Category)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Products.First().Name)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Products.First().Description)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Products.First().Price)
                            </th>
                            <th></th>
                        </tr>

                        @foreach (var item in Model.Products)
                        {
                        <tr>
                            <td>
                                <!--Esto es para que en el resultado de búsquedas,se visualicen también las imagenes de los productos y al hacer click sobre la imágen, me redireccione al detalle del producto-->
                                @if (item.ProductImageMappings != null && item.ProductImageMappings.Any())
                                 {
                            <a href="@Url.Action("Details", new { id = item.ID})">
                                <img src="@(Url.Content(Constants.ProductImagePath) +
                                          item.ProductImageMappings.OrderBy(pim =>
                                          pim.ImageNumber).ElementAt(0).ProductImage.FileName)">
                            </a>
                                 }
                            </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Category.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Price)
                        </td>
                        <td>
                            @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                            @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                            @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                        </td>
                        </tr>
                        }

                    </table>

                    <!--La primera línea de código usa el operador?: Para
                    Decidir si hay o no páginas para mostrar. Muestra "Página 0 de 0" o "Página x de y" donde x es
                    la página actual y y el número total de páginas.
                     La siguiente línea de código usa el ayudante HTML PagedListPager que viene como parte de PagedList.
                    Mvc espacio de nombres. Este ayudante toma la lista de productos y produce un hipervínculo a cada página. Url.accion
                    se utiliza para generar un hipervínculo dirigido a la vista de índice que contiene el parámetro de página. Hemos añadido un
                    tipo anónimo al método de ayuda para pasar la categoría actual, buscar y ordenar a la
                    ayudante para que cada enlace de página contenga estos en su cadena de consulta. Esto significa que el término de búsqueda, elegido
                    La categoría y el orden de clasificación se conservan al pasar de una página a otra. Sin ellos, la lista de
                    Los productos se reiniciarán para mostrar todos los productos.-->
                    <div>
                        Page @(Model.Products.PageCount < Model.Products.PageNumber ? 0 :
                           Model.Products.PageNumber) of @Model.Products.PageCount

                        @Html.PagedListPager(Model.Products, page => Url.Action("Index",
                            new
                            {
                                category = @Model.Category,
                                Search = @Model.Search,
                                sortBy = @Model.SortBy,
                                page
                            }))

                    </div>
